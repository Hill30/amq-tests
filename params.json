{
  "name": "Amq-tests",
  "tagline": "ActiveMQ - MQTT Performance Testing",
  "body": "# Case Study: Enterprise Integration with Mobile Applications\r\n## Introduction\r\nIntegrating enterprise hosted application with application deployed on mobile devices is challenging as it requires providing enterprise-level quality services over unstable networks with inconsistent bandwidth and security. We created this study to share knowledge obtain from real-life business deployment, to facilitate feedback and sharing of best practices, to put some extra emphasis on this and similar architectural solutions for open source products development to improve products’ stability and performance.\r\n## Tech Objectives\r\n1.\tProvide reliable communications with distributes network of mobile devices,\r\n2.\tSeamless integration of broad mobile network with internal messaging system.\r\n3.\tSupport for most standard enterprise communication patterns: \r\n   -    Broadcasting and pair-to-pair communications.\r\n   -    Load-balancing and fault-tolerance\r\n   -    Message routing, filtering, etc...\r\n   -    Messages' expiration and escalation\r\n   -    Reliable message delivery\r\n   -    Secure communication.\r\n4. Utilize standard and best practices for communications with growing network of mobile devices:\r\n   -\tStandard-based communication protocol\r\n   -\tSupported on Android and iOS, \r\n   - \tNon-reliable network connections, \r\n   -\tEnergy efficient communication patterns\r\n   -\tPerformance related:  \r\n      -\tMax concurrently connected mobile devices/clients – 10,000.\r\n      -\tMax communication traffic: 1,000 messages 1Mb total per device per day.\r\n      - The latency of the message delivery for connected client – 60 seconds.\r\n5. Minimized maintenance of messages\r\n   - Undelivered messages to mobile devices should expire in 48 hours.\r\n   - Dormant client subscriptions should be removed with all messages cleared in 10 days.\r\n\r\n## Methodology and Assumptions\r\n-\tTest environment will be used verify business objectives.\r\n-\tTesting will be done first for single broker and then for load-balanced deployment.\r\n-\tTest client will be created to simulate real-life mobile devices.\r\n-\tNetwork disconnect will be emulated by standard server firewall turn off-on.\r\n-\tRequired solution’s security will be provided by standard products’ functionality\r\n\r\n## Architecture Highlights\r\n-\tInternal system components implemented as services\r\n-\tUser-facing applications are iOS and Android applications.\r\n-\tAdministrative and internal power user applications are web-based.\r\n-\tMessage Broker will provide support for enterprise Integration patterns (point-to-point, broadcasting, routing, user permissions) for both internal and external applications.\r\n-\tUser authentication/authorization will be integrated with existing client’s security system.\r\n-\tApplication is responsible for data consistency and validation, deals with message duplicates.\r\n\r\n## Components/Products\r\nInternal services implemented in .Net following existing company’s standards.\r\n### Message Broker Selection\r\n    Considered:\r\n-\tRabbit MQ\r\n-\tTibco EMS\r\n-\tActive MQ\r\n-\tZero MQ\r\n\r\n    Active MQ was selected as message broker for the following reasons:\r\n    - Proven, mature, enterprise message broker platform\r\n    - Support for great variety of communication protocols.\r\n    - Available integration adapters with other proprietary and open-source message brokers.  \r\n    - Available support from third parties and original development team.  \r\n    - Build-in integration with Apache Camel for configurable message routing.\r\n\r\n## Communication Protocol Selection\r\n    Considered:\r\n-\tInternet browser-based \r\n-\tPlain HTTP-based \r\n-\tPlain TCP\r\n-\tMQTT\r\n\r\n    MQTT communication protocol was selected for communication with mobile devices. \r\n    Reasons:\r\n    1.\tBuilt for message-based communications with mobile devices.\r\n    2.\tAvailable integration with Active MQ and other major message brokers.\r\n    3.\tIntegration client libraries available for both iOS and Android\r\n    4.\tWidely accepted by industry for “Internet of Things” type of integrations.\r\n    5.\tStandard protocol (OASIS).\r\n    6.\tBinary compatibility/interoperability to minimize vendor dependency.\r\n    7.\tProven standard protocol (current version 3.1.1)\r\n    8.\tFor Android - Paho client-side library development supported by IBM.\r\n    9.\tFor iOS – native open source libraryhttps://github.com/ckrey/MQTT-Client-Framework.\r\n\r\n\r\n\r\n## Active MQ – MQTT Integration Highlights\r\n### ActiveMQ Configuration.\r\n1.\tAdded/enabled MQTT adapter to Active MQ configuration.\r\n2.\tIncreased max connections to 10,000\r\n3.\tChanged communication protocol to NIO (greatly reduces number of active threads for large number connections).\r\n4.\tEnabled more memory for the broker - 4GB (this is maximum using default wrapper that comes with ActiveMQ installation package).\r\n5.\tEnabled thread pool.\r\n6.\tAdded transport level security – SSL.\r\n    Changes extracted from config:\r\n    <transportConnectors>\r\n\t…\r\n            <transportConnector name=\"mqtt+nio+ssl\" uri=\"mqtt+nio+ssl://0.0.0.0:8883?maximumConnections=10000\"/>\r\n\t…\r\n    </transportConnectors>\r\n\r\n### MQTT Client\r\n1.\tActive MQ topics, default communication channel will be used for connection with Active MQ broker.\r\n2.\tMessages sent to MQTT will use durable (to store-and-publish messages for disconnected subscribers) topics. \r\n3.\tMQTT will be sending message to non-durable topic (default MQTT adapter implementation in ActiveMQ).\r\n\r\n### Active MQ Topic - Queue Routing\r\nMQTT – Active MQ adapter receives incoming messages in non-durable topic. The broker is configured to use Camel to route all messages from this to non-durable topic to a queue. This provides durability for messages to survive broker restart. It also provides support for built-in load-balanced message processing.\r\n\r\n## Active MQ - Server-Side Integration\r\nServer side components implemented using .Net framework and integrated with Active MQ using NMS implementation library [http://activemq.apache.org/nms/].\r\n\r\nServer – Client communication uses AMQ durable topics which are mapped to MQTT channels by MQTT AMQ adapter. To make topic/messages durable (persistent to file) application service will be setting messages’ quality of service flag QoS to 1 or 2.\r\n\r\nServer specifies time-to-live for client messages to trigger expiration for non-delivered messages in the broker.\r\n\r\n![](https://raw.githubusercontent.com/Hill30/amq-tests/master/Images/AMQ_App-MQTT_Subscriber_Data_Flow.png)\r\n\r\nClient-Server communication uses a combination of AMQ non-durable topic where messages received from MQTT adapter and queues to provide durability and load-balanced processing. \r\nApache Camel (with very basic, XML mapping is used to transfer messages from input topic to application processing queue. \r\n\r\n![](https://github.com/Hill30/amq-tests/blob/master/Images/ActiveMQ-MQTT_Publisher-AppService_Configuration.gif?raw=true)\r\n\r\n\r\n### Target Deployment Configuration\r\nActiveMQ  \r\n  1. Individual MQTT user mapped to dedicated durable topic.  \r\n  2. Messages sent to durable topic have expiration timeout.  \r\n  3. Incoming from MQTT client messages needs to be routed to a queue for durability and load-balanced processing.  \r\n  4. Enabled Camel with pre-set XML-based configuration for topic to queue message routing.  \r\n  5. Messages persisted in KahaDB (default) store.  \r\n  6. Load Balancing and Failover choice: Network of brokers with duplex inter-broker communication.  \r\n     Pros:  \r\n          i.\tStandard, most common configuration  \r\n          ii.\tNo need for shared date store (KahaDB) instance.  \r\n     Cons:  \r\n          i.\tCombination with durable topics results in MQTT client receiving duplicate messages switching between brokers.  \r\n          ii.\tIncoming from MQTT messages need to be filtered from replication to avoid duplicates in re-routed queue.  \r\n          iii.\tEvery broker in Network of Broker configuration will use its own persistent store.  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here [using GitHub Flavored Markdown](https://guides.github.com/features/mastering-markdown/), select a template crafted by a designer, and publish. After your page is generated, you can check out the new `gh-pages` branch locally. If you’re using GitHub Desktop, simply sync your repository and you’ll see the new branch.\r\n\r\n### Designer Templates\r\nWe’ve crafted some handsome templates for you to use. Go ahead and click 'Continue to layouts' to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved.\r\n\r\n### Creating pages manually\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}