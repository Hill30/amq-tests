{
  "name": "Amq-tests",
  "tagline": "ActiveMQ - MQTT Performance Testing",
  "body": "# Case Study: Enterprise Integration with Mobile Applications\r\n## Introduction\r\nIntegrating enterprise hosted application with application deployed on mobile devices is challenging as it requires providing enterprise-level quality services over unstable networks with inconsistent bandwidth and security. We created this study to share knowledge obtain from real-life business deployment, to facilitate feedback and sharing of best practices, to put some extra emphasis on this and similar architectural solutions for open source products development to improve products’ stability and performance.\r\n## Tech Objectives\r\n1.\tProvide reliable communications with distributes network of mobile devices,\r\n2.\tSeamless integration of broad mobile network with internal messaging system.\r\n3.\tSupport for most standard enterprise communication patterns: \r\n   -    Broadcasting and pair-to-pair communications.\r\n   -    Load-balancing and fault-tolerance\r\n   -    Message routing, filtering, etc...\r\n   -    Messages' expiration and escalation\r\n   -    Reliable message delivery\r\n   -    Secure communication.\r\n4. Utilize standard and best practices for communications with growing network of mobile devices:\r\n   -\tStandard-based communication protocol\r\n   -\tSupported on Android and iOS, \r\n   - \tNon-reliable network connections, \r\n   -\tEnergy efficient communication patterns\r\n   -\tPerformance related:  \r\n      -\tMax concurrently connected mobile devices/clients – 10,000.\r\n      -\tMax communication traffic: 1,000 messages 1Mb total per device per day.\r\n      - The latency of the message delivery for connected client – 60 seconds.\r\n5. Minimized maintenance of messages\r\n   - Undelivered messages to mobile devices should expire in 48 hours.\r\n   - Dormant client subscriptions should be removed with all messages cleared in 10 days.\r\n\r\n## Methodology and Assumptions\r\n-\tTest environment will be used verify business objectives.\r\n-\tTesting will be done first for single broker and then for load-balanced deployment.\r\n-\tTest client will be created to simulate real-life mobile devices.\r\n-\tNetwork disconnect will be emulated by standard server firewall turn off-on.\r\n-\tRequired solution’s security will be provided by standard products’ functionality\r\n\r\n### ActiveMQ Configuration.\r\n1.\tAdded/enabled MQTT adapter to Active MQ configuration.\r\n2.\tIncreased max connections to 10,000\r\n3.\tChanged communication protocol to NIO (greatly reduces number of active threads for large number connections).\r\n4.\tEnabled more memory for the broker - 4GB (this is maximum using default wrapper that comes with ActiveMQ installation package).\r\n5.\tEnabled thread pool.\r\n6.\tAdded transport level security – SSL.\r\n\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here [using GitHub Flavored Markdown](https://guides.github.com/features/mastering-markdown/), select a template crafted by a designer, and publish. After your page is generated, you can check out the new `gh-pages` branch locally. If you’re using GitHub Desktop, simply sync your repository and you’ll see the new branch.\r\n\r\n### Designer Templates\r\nWe’ve crafted some handsome templates for you to use. Go ahead and click 'Continue to layouts' to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved.\r\n\r\n### Creating pages manually\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}